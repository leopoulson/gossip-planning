* Thesis Structure
** Introduction (<5 pages)
*** Motivate
*** State Contributions 
    We need to make clear exactly what we're putting forward; namely the
    algorithm and the implementation.

    In here, we need to argue that the contributions are: 
    
**** Important 
     The fact that there's so much literature on the topic is a testament to the it being an important work. 
     Perhaps we can convey this point in the general introduction part. 

     It would be also good to mention the motivations for using an automata
     method for the project. 

**** New 
     We need to show that what we've done is new; to do this we can just exhaust
     the lit review and show that there isn't anything else that achieves what
     we're setting out to do.

     We can mention that there are existing checkers for this (e.g. DEMO-S5,
     SMCDEL, ...), but none that perform it using the automata approach. We can
     also just cite the (modern) papers on the topic. 
**** Interesting 
     Here, we can just discuss the gossip problem in itself. It *is* an
     interesting topic, and as such we can just talk about it; little particular
     dressing up needs to be done in this section.

**** Difficult / Challenging / Worthy of 3rd year project
     This is probably the most difficult section to write. Here we need to
     discuss why this task will be / is difficult; mainly discuss that there's a
     lot of new background and theory that took a lot of time to understand.

     We can try and mention the explicit challenges that we face throughout the
     project. This lays it out very clearly to the marker.
*** Purpose
    The purpose of this chapter is to communicate to the reader precisely what
    our contributions are, what they do, and why they are worthwhile. 

    This statement is one of the most important parts of the whole thesis, and
    the marker will most likely have some idea of what mark they will give it
    based on the ideas put forward in the introduction.

This chapter should describe the project context, and motivate each of
the proposed aims and objectives.  Ideally, it is written at a fairly
high-level, and easily understood by a reader who is technically
competent but not an expert in the topic itself.

In short, the goal is to answer three questions for the reader. 
First, what is the project topic, or problem being investigated? 
Second, why is the topic important, or rather why should the reader care about
it? For example, why there is a need for this project (e.g., lack of similar
software or deficiency in existing software), who will benefit from the project
and in what way (e.g., end-users, or software developers) what work does the
project build on and why is the selected approach either important and/or
interesting (e.g., fills a gap in literature, applies results from another field
to a new problem). 
Finally, what are the central challenges involved and why are they significant?

The chapter should conclude with a concise bullet point list that
summarises the aims and objectives.  For example:

\begin{quote}
\noindent
The high-level objective of this project is to reduce the performance
gap between hardware and software implementations of modular arithmetic.
More specifically, the concrete aims are:

\item Research and survey literature on public-key cryptography and
      identify the state of the art in exponentiation algorithms.
\item Improve the state of the art algorithm so that it can be used
      in an effective and flexible way on constrained devices.
\item Implement a framework for describing exponentiation algorithms
      and populate it with suitable examples from the literature on
      an ARM7 platform.
\item Use the framework to perform a study of algorithm performance
      in terms of time and space, and show the proposed improvements
      are worthwhile.

*** Structure 
**** General Introduction
**** Motivation
     Talk about why it's interesting and why to spend so much time on it
***** DONE Introduction to the classic gossip problem
      CLOSED: [2019-04-07 Sun 11:51]
***** DONE Introduction to the dynamic gossip problem
      CLOSED: [2019-04-07 Sun 11:51]
***** TODO Applications (mainly networking)
      This would be a good part to mention how many people there are studying
      the gossip problem; to make it clear that the project is important. 
      We should add some more of these; there's not really enough right now.
      There are very many though so I'm sure we can find some!
***** TODO Find an example of the gossip problem requiring that every agent knows everyone is an expert. 
***** TODO Provide some examples of gossip solvers / model checkers from the literature. 
      We need to find out if SMCDEL is capable of planning, or just
      verification. 
***** DONE An introduction to planning, especially epistemic planning. 
      CLOSED: [2019-04-13 Sat 10:53]
***** Introduce model checking
**** Three questions
***** What is the project topic, or problem being investigated?
      This will be covered in the brief intro
****** Planning
       Planning is the task of taking a model in some state to a successful
       state through a finite set of actions.
***** Why is the topic important, or why should the reader care?
      We need to communicate that there is a need for this project. We don't
      have an end-user as such - however, if we can communicate that this topic
      is frequently researched then we should be able to show the reader that
      the project is worthwhile?

      It would be good here to emphasise that our technique is very different to
      the methods used in the existing tools; that no one has yet implemented
      this system through use of automata. This will kind of say that it's a
      worthwhile thing in itself - good. 
***** What are the central challenges involved and why are they significant? 
      One central challenge is the mass of new background required - a
      significant amount of theory beyond what's covered on the core degree. 
**** Declare contributions
     Bezier curve example has a good section on this; just bullet pointing them.
     It would be good to talk about the *challenges*; this would convey to the
     marker where the difficulties came from. 
***** Research and survey literature on the topic & identify the state of the art
***** Implement a system to solve the planning problem for the gossip problem 
***** Ensure that this system will also successfully plan for other models of knowledge
***** Implement a testing system with which we can check that our results are correct
***** Perform a study of performance in terms of time and space, and explain this. 
***** --------------------------
***** Formalising the algorithm discussed in the paper
***** Implementation in Haskell
***** How our system improves on the existing software available? 
***** Unification of these different areas (DEL, automated planning...)
** Background (10-15 pages)
*** Purpose
    The purpose of this chapter is to guide the marker through my work and make
    sure they understand it enough to see what's going on in the later parts.

This chapter is intended to describe the technical basis on which execution
of the project depends.  The goal is to provide a detailed explanation of
the specific problem at hand, and existing work that is relevant (e.g., an
existing algorithm that you use, alternative solutions proposed, supporting
technologies).

Per the same advice in the handbook, note there is a subtly difference from
this and a full-blown literature review (or survey).  The latter might try
to capture and organise (e.g., categorise somehow) {\em all} related work,
potentially offering meta-analysis, whereas here the goal is simple to
ensure the dissertation is self-contained.  Put another way, after reading
this chapter a non-expert reader should have obtained enough background to
understand what {\em you} have done (by reading subsequent sections), then
accurately assess your work.  You might view an additional goal as giving
the reader confidence that you are able to absorb, understand and clearly
communicate highly technical material.
*** Teaching 
    Essentially just keep elaborating on what's already in my background chapter. 
*** Literature review
    We need to show that we're very comfortable with the surrounding literature
    and have exhausted it. Two important subpoints:
**** Discussion of other tools 
     Here we need to mention what exists, in order to later compare our tool
     against the existing. This will be Malvin's two, as well as perhaps JvE's
     work. We should also make clear here that there's nothing else that does
     what we're planning to do.
**** Account of general theory of uniform strategies
     We should give a basic overview of what uniform strategies are about, to
     the end of showing to the marker that our algorithm is a special case of
     this. It need not be a perfect explanation, but enough to show where our
     approach is coming from.
*** Structure
    Do we want to introduce DEL or GP first? 
**** Introduce DEL, and its semantics
***** DONE The language of EL
      CLOSED: [2019-04-06 Sat 15:40]
***** DONE Kripke models
      CLOSED: [2019-04-06 Sat 16:05]
****** TODO Check if the set of worlds in a Kripke model needs to be finite
***** DONE Evaluation on Kripke models
      CLOSED: [2019-04-06 Sat 16:43]
***** DONE Properties of knowledge;
      CLOSED: [2019-04-06 Sat 17:22]
      We should mention that the knowledge operator is an equivalence relation,
      and that this will be the case thoroughout the thesis. 

      We could also mention porperties of knowledge if we don't have certian
      axioms. 
***** DONE Event models
      CLOSED: [2019-04-07 Sun 11:30]
      We should probably give a worked example for this part; or just an example
      of an event model. We could just use the gossip problem?
***** A long example of all of it 
      Perhaps just a toy example with two agents. We could just lift the Alice &
      Bob example from Gattinger thesis? It would probably be quite nice to not
      do an example in gossip problem, as we won't have introduced it yet
**** Formalise the gossip problem
***** DONE Introduce it as in Tij71?
      Phone calls between one another... 
***** DONE Then introduce dynamic gossip
      Mainly highlight that the graph changes over time. Show some examples
***** DONE Definitely mention something about protocols. 
      We will need to mention the restriction of just propositional protocols;
      however, this should come after we've introduced planning and the
      restriction that this puts on us. 
***** TODO Then formalise everything afterwards. 
**** Formalising of Planning
***** DONE General overview - what it is
***** DONE Then talk about the epistemic variant of it? 
      This might not really make sense - there's no particular distinction
      between the two
***** We should mention the effect of this on what we want to do
      Specifically, the restriction to proposotional planning. 
***** We should probably make clear the difference between planning and model checking
**** Other tools 
     We should give, for each, 
***** An overview of the way it works 
***** What information we can take from them?
***** Shortcomings of this implementation; what my tool will do that theirs didn't. 
***** DEMO-S5
***** Gossip
***** SMCDEL
**** General theory of Uniform Strategies
***** DONE A recap on what transducers are
      CLOSED: [2019-04-10 Wed 11:27]
***** TODO Also add something about FSMs?
***** DONE Game Arenas
      CLOSED: [2019-04-10 Wed 09:42]
***** DONE Powerset Arenas & Construction
      CLOSED: [2019-04-10 Wed 11:27]
***** DONE Lifting Transducers
      CLOSED: [2019-04-10 Wed 11:27]

** Algorithm & Implementation (10-20 pages)
*** Purpose
    The purpose of this section is to back up what we said in the initial
    section; that our work has been difficult and challenging. We want to
    communicate that we have indeed done a substantial piece of work.
*** Algorithm
    In here, we want to give an overview of what the algorithm consists of. This
    should include an example run. We also need to make clear our contributions;
    what does this do, what does it add, etc
**** Differences from literature
***** Our Epistemic Models have initial states. 
***** In ME* we never really make any transitions where we read a world. 
      Indeed we need to change this in the code - eek !
***** Knowledge Filter !!! 
      DEFINITELY mention this... 
**** Structure
     We need to remember to highlight our contributions here. 
     * Definitely highlight the specialisation of the uniform strategies 
     * 
***** DONE Some kind of introduction
      CLOSED: [2019-04-12 Fri 10:36]
      Mention that the algorithm stated is a valuable addition to the thesis and
      is one of the goals
     
      Also discuss where it came from and how it differs from existing processes? 
****** Perhaps it would be good here to give a general overview of the algorithm before getting into the details. 
***** ME* - what it is and does, and how it is built
****** How it represents all possible paths through the automata it can take
****** Problems with it (i.e, lack of powerset-ness)
***** Our version of the powerset construction
****** We need to address what precisely it is that our transducer does in this case. 
       Mention construction of call-relating transducer, and then composition w/ identity.
***** BFS on the resulting graph. 
***** Compositions of automata (union, negation of formulas etc)
      Quite straightforward to talk about ..
***** Example run thru of algorithm
****** First, the construction of ME*
****** Construction of composed transducer 
****** Next the powersetification of it
****** And finally a run thru of BFS on it? 
*** Implementation
    Here we would like to discuss implementation details and design choices.
**** Why Haskell
      In this we can mention exploiting laziness, etc

**** Why not to use an automata library 
     Not a particular reason for this as it stands lol. Perhaps this can be to do with the weirdness w/ the SSFST and normal FST composition? 
    
**** Structure
***** Introduction
***** Discussion of software structure
****** Model.hs 
       This is the start of it all. 
       * Discuss support for epistemic models and event models; 
       * definitely highlight the difference btwn maths defn for ep models and
         implementation. 
       * Also update function
       * MultiParamTypeClass
****** ME.hs
       This one keeps MEstar in it.
       * Mention similarity of transition in ME to the formal representation
       * Again, multi param type class to ensure a state can be evaluated 
****** FSM and FST
       These guys contain the machines. 
       
       We should address in here why we chose not to use an external library for
       our machines. 
       * We do perform some non-standard operations. Hence it would be nice to
         have a good understanding and access to the foundations of the
         machines.
       * Lack of particularly good existing implementations (either very old or
         overcomplicated [Kmett])

****** Powerset.hs
       * In here discuss how it slightly varies from the algorithmic
         specification.
       * Most pertinently, we need to address the filter that we use. Recognise
         that this is rather dirty, yet we had to add it so as to force software
         to match Malvin's. 
       * Also mention the more tricky things about how we construct the
         powersets recursively and so on. 

****** BFSM,hs
       * Just give a brief overview of how we implemented BFS.
       * Here we could also mention difference lists? 
***** Discussion of design decisions
****** Why Haskell
       * First-class functions and ease of partial application. This makes the
         creation of the transition functions super simple, as we can just do it
         during runtime ?
       * Laziness
       * Ability to have this set of states, but never truly enumerate it
       * Similarity to mathematical notation - this pushed a lot of the
         implemnetation difficulty onto the algorithm derivation
****** Why not an automata library
** Evaluation (5-10 pages)
*** Purpose
    Here we need to argue that we have *evidence* that we've *achieved* that
    which we say we had in the beginning. This is *backing up* our claims. Note
    that the evaluation is commonly seen as a mark of a good project; a flimsy
    evaluation suggests that the writer has not really considered their work. It
    is *definitely* in our interest to work hard on this section and fill it
    with good information.

    This chapter often acts to differentiate project quality: even if the work
    completed is of a high technical quality, critical yet objective evaluation
    and comparison of the outcomes is crucial.  In essence, the reader wants to
    learn something, so the worst examples amount to simple statements of fact
    (e.g., ``graph X shows the result is Y''); the best examples are analytical
    and exploratory (e.g., ``graph X shows the result is Y, which means Z; this
    contradicts [1], which may be because I use a different assumption'').  As
    such, both positive {\em and} negative outcomes are valid {\em if} presented
    in a suitable manner.

    This chapter is intended to evaluate what you did.  The content is highly
    topic-specific, but for many projects will have flavours of the following:

      \begin{enumerate}
      \item functional  testing, including analysis and explanation of failure
            cases,
      \item behavioural testing, often including analysis of any results that
            draw some form of conclusion wrt. the aims and objectives,
            and
      \item evaluation of options and decisions within the project, and/or a
            comparison with alternatives.
      \end{enumerate}

*** Content
**** Plan for testing 
     Here we can talk about why we did testing in the way that we did and so on.
     Make sure to emphasise that we did consider the test plan prior to
     starting, and that it's been thought over heavily; this will no doubt
     reflect well than just going in willy-nilly
**** Test results and comparison 
     This is going to attest to what we say in the intro, about whether or not
     our implementation is optimal and so on. Make sure to profile Malvin's
     stuff and whatever. Would be great to discuss why these things occur.
**** Sketch proof of correctness
     Unsure about this. Perhaps this will just come as a direct consequence of
     it being derived from the uniform strategies section?
**** Point out negatives and explain
     This is a really important part; if we have any negatives (trust me we DO)
     it would be very good to explain where these negatives come from.
**** Discussion of optimisation
     Again this is just a chance to mention how we made it quick. Got a good
     history of this in the notes so this should be fine!
*** Structure
**** Introduction
**** Plan for Testing
     Here we shoul discuss why we tested the way we did and so on. We want to
     emphasise that we considered the plan prior to starting. 
     
     Address:
     * Why we used the existing tool to compare against
     * Why not QuickCheck
     * How we created the arbitrary gossip graphs
**** Test Results
     Basically we want to talk about whether or not our stuff is correct or not. 
     This is where the going gets tough. Mention KK not working and also conjunction... 
**** Profiling? 
     Discuss how we profile, and the benefits of our approach vs others?
     Then discuss results. 
***** We shoudl mention any infrastructure we use for profiling. 
      We should probably build some kind of auto-generator for gossip graphs and
      just use these.
***** Speed analysis; mention that it is slower and analyse why. 
      Ok, so why?
     
      We spend the bulk of our time in the `models` function. This is quite
      unavoidable; we use it basically all the time; mainly when transitioning.
      Short of changing it to be a hashable set there's little we can do to
      avoid this "knot". 

      Similarly, it seems that Malvin's code spends the bulk of its time in
      EpistAlt, which, given a 
***** Space analysis - again just address where the shortcomings come from. 
***** Differences between the two
      The main way seems to be the way that we perform the task of planning. The
      other tool computes the set of all call sequences and then checks each
      one, in a convential, model-checking manner. This means that it can
      perform a lot of the checking "in hindsight"; it works backwards, whereas
      we work forwards. 
***** Results 
****** Our tool is quicker than theirs for returning a single path
       This is naturally because they have to return a set; we need only return
       a single one. Can we give a more profound analysis? 
****** However, when we change the code in the other tool to return the 1st path
       It's quicker. This is quite nice, and it means that we have something to
       write about. However it does NOT guarantee that the path returned is
       optimal as our tool does. 
**** Point out negatives of the design
***** The fact that we carry our set of states along with us
      We might be able to change this s.t we keep track of th set of calls
      indistinguishable from ours so far and update this as we go? And then when
      it comes to evaluation we apply them? However we need to evaluate *at each
      state*, so this might not be very good. 
***** We could have utilised the monotonicity of the true propositions
      For instance, we know that in the gossip problem there is no way that a
      proposition, when true at a given state, can then become untrue. However
      this could not be the case for another epistemic model. 
** Conclusion and Future Work (~3 pages)
**** Reflection, summary, future work 
* To ask about 
  - Is it too early to introduce propositional pre- / post-conditions? 
